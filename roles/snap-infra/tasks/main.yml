- hosts: localhost
  connection: local
  tasks:
  #  - include: "{{ path }}/roles/snap-infra/tasks/elb.yml"
 
  - name: Gather EC2 facts.
    ec2_instance_facts:
      aws_secret_key: "{{ aws_secret_key }}"
      aws_access_key: "{{ aws_access_key }}"
      region: "{{ region }}"
      filters:
        "tag:backup": "yes"
        "tag:substack": "{{ stack }}"
    register: ec2_facts
  
  #- name: Print the name of the instances
  #  debug:
  #    msg: "Instance Tag name is: '{{ item.tags.Name }}'"
  #  with_items: "{{ ec2_facts.instances }}"
 
  - name: Find snapshots.
    ec2_snapshot_facts:
      aws_secret_key: "{{ aws_secret_key }}"
      aws_access_key: "{{ aws_access_key }}"
      region: "{{ region }}"
      filters:
        "tag:identifier": "awsbackup"
        "tag:incremental": "{{ INCREMENTAL }}"
    register: ec2_snapshot_facts

 # - name: Print snapshot facts
 #   debug:
 #     msg: "{{ ec2_snapshot_facts }}" 


  - name: Get ordered list of snapshots for stack.
    set_fact:
      snaps_fact_list:  "{{ ec2_snapshot_facts.snapshots|selectattr('tags.identifier', 'equalto', 'awsbackup')|selectattr('tags.incremental', 'equalto', INCREMENTAL)|selectattr('tags.instance', 'equalto', item.tags.substack)|sort(attribute='start_time')|reverse|map(attribute='snapshot_id')|list }}"
    with_items: "{{ ec2_facts.instances }}"
    register: snaps_fact_list_register 

  - name: Cut the list by our COUNT variable.
    set_fact:
      snaps_cut: "{{ item.ansible_facts['snaps_fact_list'][:1] }}"
    with_items: "{{ snaps_fact_list_register.results }}"
    register: snaps_cut_register

  - name: Find the latest snapshot of stack
    set_fact:
      snaps_joined: "{{ item.ansible_facts.snaps_cut }}"
    with_items: "{{ snaps_cut_register.results }}"
    register: snaps_joined_register
  
  - name: set fact the snapshot id
    set_fact:
      snaps_id: "{{ item }}"
    with_items: "{{ snaps_joined }}"
    register: snaps_joined_register_id

  - ec2_ami:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ region }}"
      name: "{{ snaps_id }}_{{ ansible_date_time.year }}{{ ansible_date_time.month }}{{ ansible_date_time.day }}{{ansible_date_time.hour }}{{ ansible_date_time.minute }}{{ ansible_date_time.second }}"
      state: present
      architecture: x86_64
      virtualization_type: hvm
      root_device_name: /dev/xvda
      device_mapping:
        - device_name: /dev/xvda
    #      size: "{{ size }}"
          snapshot_id: "{{ snaps_id }}"
     # with_items: "{{ snaps_joined }}"
          delete_on_termination: true
          volume_type: gp2
    register: image
 
  - pause: seconds=40
  


    
      
  
  - name: Launch Instance
    ec2:
      group_id: "{{ ec2_sg_id }}"
      count: "{{ ec2_count }}"
      keypair: "{{ ec2_key_name }}"
      instance_type: "{{ ec2_instance_type }}"
      image: "{{ image.image_id }}"
      wait: true
      region: "{{ region }}"
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
      monitoring: "{{ ec2_monitoring }}"
      assign_public_ip: "{{ ec2_assign_public_ip }}"
      instance_tags:
         Name: "{{ server }}"
         Application: "{{ server }}"
         Environment: "{{ env }}"
         Createdby: "{{ Creater }}"
         Expireday: "{{ expday }}"
         Stack: "{{ stack }}"
         
    register: ec2


  - name: Wait for SSH to come up
    local_action: wait_for
                  host={{ item.private_ip }}
                  port="{{ PORT }}"
                  state=started
    with_items: "{{ ec2.instances }}"

  - name: Add dynamic host and variable
    add_host:
       name: "{{ item.private_ip }}"
       groups: aws
       service: "{{ server }}"
       ansible_ssh_user: "{{ USER }}"
       ansible_ssh_pass: "{{ PASSWD }}"
       ansible_sudo_pass: "{{ PASSWD }}"
       ansible_ssh_port: "{{ PORT }}"
     #  ansible_ssh_private_key_file: /home/awsdev/pp.pem
    with_items: "{{ ec2.instances }}"

- hosts: aws 
  become: yes
  become_user: root

  tasks:
    - include: "{{ path }}/roles/ServerStart/tasks/task.yml"
    - include: "{{ path }}/roles/ServerStart/tasks/symentic.yml"
    - include: "{{ path }}/roles/ServerStart/tasks/ossec.yml"


- hosts: aws
  gather_facts: True
  become: yes
  become_user: root
  roles:
    - "{{ path }}/roles/pci/"

#- hosts: localhost
 # tasks:
 # - name: Register instances 
 #   local_action: ec2_elb
 ##   args:
  #    aws_access_key: "{{ aws_access_key }}"
  #    aws_secret_key: "{{ aws_secret_key }}"
  #    ec2_elbs: "{{ elb_name }}"
  #    region: "{{ region }}"
  #    instance_id: "{{ item.id }}"
  #    validate_certs: no
  #    enable_availability_zone: yes
  #    wait: yes
  #    state: present
  #  with_items: "{{ ec2.instances }}"
  #  ignore_errors: yes


    

    

    
 