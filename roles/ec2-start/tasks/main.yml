- hosts: localhost
  connection: local
  tasks:

  - ec2_ami:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ region }}"
      name: "{{ snap_id }}_{{ ansible_date_time.year }}{{ ansible_date_time.month }}{{ ansible_date_time.day }}{{ansible_date_time.hour }}{{ ansible_date_time.minute }}{{ ansible_date_time.second }}"
      state: present
      architecture: x86_64
      virtualization_type: hvm
      root_device_name: /dev/xvda
      device_mapping:
        - device_name: /dev/xvda
    #      size: "{{ size }}"
          snapshot_id: "{{ snap_id }} "
          delete_on_termination: true
          volume_type: gp2
    register: image
 
  - pause: seconds=40
  


    
      
  
  - name: Launch Instance
    ec2:
      group_id: "{{ ec2_sg_id }}"
      count: "{{ ec2_count }}"
      keypair: "{{ ec2_key_name }}"
      instance_type: "{{ ec2_instance_type }}"
      image: "{{ image.image_id }}"
      wait: true
      region: "{{ region }}"
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      vpc_subnet_id: "{{ ec2_vpc_subnet_id }}"
      monitoring: "{{ ec2_monitoring }}"
      assign_public_ip: "{{ ec2_assign_public_ip }}"
      instance_tags:
         Name: "{{ server }}"
         Application: "{{ server }}"
         Environment: "{{ env }}"
         Createdby: "{{ Creater }}"
         Expireday: "{{ expday }}"
         Stack: "{{ STACK }}"
         
    register: ec2


  - name: Wait for SSH to come up
    local_action: wait_for
                  host={{ item.public_ip }}
                  port="{{ PORT }}"
                  state=started
    with_items: "{{ ec2.instances }}"

  - name: Add dynamic host and variable
    add_host:
       name: "{{ item.public_ip }}"
       groups: aws
       service: "{{ server }}"
       ansible_ssh_user: "{{ USER }}"
       ansible_ssh_pass: "{{ PASSWD }}"
       ansible_sudo_pass: "{{ PASSWD }}"
       ansible_ssh_port: "{{ PORT }}"
     #  ansible_ssh_private_key_file: /home/awsdev/pp.pem
    with_items: "{{ ec2.instances }}"

- hosts: aws 
  become: yes
  become_user: root

  tasks:
    - include: "{{ path }}/roles/ServerStart/tasks/task.yml"
    - include: "{{ path }}/roles/ServerStart/tasks/symentic.yml"
    - include: "{{ path }}/roles/ServerStart/tasks/ossec.yml"


- hosts: aws
  gather_facts: True
  become: yes
  become_user: root
  roles:
    - "{{ path }}/roles/pci/"

- hosts: localhost
  tasks:
  - name: Register instances 
    local_action: ec2_elb
    args:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      ec2_elbs: "{{ elb_name }}"
      region: "{{ region }}"
      instance_id: "{{ item.id }}"
      validate_certs: no
      enable_availability_zone: yes
      wait: yes
      state: present
    with_items: "{{ ec2.instances }}"


    

    

    
 